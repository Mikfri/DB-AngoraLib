// <auto-generated />
using System;
using DB_AngoraLib.EF_DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB_AngoraREST.Migrations
{
    [DbContext(typeof(DB_AngoraContext))]
    partial class DB_AngoraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DB_AngoraLib.Models.ApplicationBreeder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateSubmitted")
                        .HasColumnType("date");

                    b.Property<string>("DocumentationPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedBreederRegNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserApplicantId");

                    b.ToTable("BreederApplications");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.BreederBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BreederBrandDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreederBrandLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreederBrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFindable")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BreederBrands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreederBrandDescription = "Lille opdræt af Satin-angoraer i forskellige farver. Jeg tilbyder god uld med og uden plantefarver",
                            BreederBrandName = "Friborg's kaninavl",
                            IsFindable = true,
                            UserId = "IdasId"
                        },
                        new
                        {
                            Id = 2,
                            BreederBrandDescription = "Jeg tilbyder Satin-angoraer, uld og skind i klassiske farver",
                            BreederBrandName = "Sletten's kaninavl",
                            IsFindable = true,
                            UserId = "MajasId"
                        });
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RabbitEarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RabbitEarCombId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.Property<string>("EarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("FatherId_Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Father_EarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ForBreeding")
                        .HasColumnType("int");

                    b.Property<int>("ForSale")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherId_Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mother_EarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<string>("RightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EarCombId");

                    b.HasIndex("Father_EarCombId");

                    b.HasIndex("Mother_EarCombId");

                    b.HasIndex("OriginId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Rabbits");

                    b.HasData(
                        new
                        {
                            EarCombId = "5095-002",
                            Color = 16,
                            DateOfBirth = new DateOnly(2020, 6, 12),
                            DateOfDeath = new DateOnly(2022, 7, 22),
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "002",
                            MotherId_Placeholder = "5095-001",
                            Mother_EarCombId = "5095-001",
                            NickName = "Sov",
                            OriginId = "IdasId",
                            OwnerId = "IdasId",
                            Race = 0,
                            RightEarId = "5095"
                        },
                        new
                        {
                            EarCombId = "5095-001",
                            Color = 18,
                            DateOfBirth = new DateOnly(2019, 2, 27),
                            DateOfDeath = new DateOnly(2024, 4, 13),
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "001",
                            NickName = "Kaliba",
                            OriginId = "IdasId",
                            OwnerId = "IdasId",
                            Race = 0,
                            RightEarId = "5095"
                        },
                        new
                        {
                            EarCombId = "5095-003",
                            Color = 28,
                            DateOfBirth = new DateOnly(2020, 3, 12),
                            DateOfDeath = new DateOnly(2023, 11, 3),
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "003",
                            MotherId_Placeholder = "5095-001",
                            Mother_EarCombId = "5095-001",
                            NickName = "Smørklat Smør",
                            OriginId = "IdasId",
                            OwnerId = "IdasId",
                            Race = 0,
                            RightEarId = "5095"
                        },
                        new
                        {
                            EarCombId = "4640-120",
                            Color = 16,
                            DateOfBirth = new DateOnly(2021, 5, 11),
                            DateOfDeath = new DateOnly(2023, 11, 3),
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "120",
                            NickName = "Mulan",
                            OwnerId = "IdasId",
                            Race = 0,
                            RightEarId = "4640"
                        },
                        new
                        {
                            EarCombId = "4640-105",
                            Color = 13,
                            DateOfBirth = new DateOnly(2021, 4, 5),
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "105",
                            NickName = "Ingolf",
                            OwnerId = "IdasId",
                            Race = 0,
                            RightEarId = "4640"
                        },
                        new
                        {
                            EarCombId = "5095-0124",
                            Color = 27,
                            DateOfBirth = new DateOnly(2024, 5, 7),
                            FatherId_Placeholder = "V23-023",
                            Father_EarCombId = "V23-023",
                            ForBreeding = 0,
                            ForSale = 1,
                            Gender = 1,
                            LeftEarId = "0124",
                            MotherId_Placeholder = "5053-0223",
                            Mother_EarCombId = "5053-0223",
                            NickName = "Aron",
                            OriginId = "IdasId",
                            OwnerId = "IdasId",
                            Race = 17,
                            RightEarId = "5095"
                        },
                        new
                        {
                            EarCombId = "5095-0624",
                            Color = 5,
                            DateOfBirth = new DateOnly(2024, 5, 7),
                            FatherId_Placeholder = "V23-023",
                            Father_EarCombId = "V23-023",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0624",
                            MotherId_Placeholder = "5053-0223",
                            Mother_EarCombId = "5053-0223",
                            NickName = "Articuno",
                            OriginId = "IdasId",
                            OwnerId = "IdasId",
                            Race = 17,
                            RightEarId = "5095"
                        },
                        new
                        {
                            EarCombId = "5095-0224",
                            Color = 6,
                            DateOfBirth = new DateOnly(2024, 5, 7),
                            FatherId_Placeholder = "V23-023",
                            Father_EarCombId = "V23-023",
                            ForBreeding = 0,
                            ForSale = 1,
                            Gender = 0,
                            LeftEarId = "0224",
                            MotherId_Placeholder = "5053-0223",
                            Mother_EarCombId = "5053-0223",
                            NickName = "Azelf",
                            OriginId = "IdasId",
                            OwnerId = "IdasId",
                            Race = 17,
                            RightEarId = "5095"
                        },
                        new
                        {
                            EarCombId = "5095-0324",
                            Color = 6,
                            DateOfBirth = new DateOnly(2024, 5, 7),
                            FatherId_Placeholder = "V23-023",
                            Father_EarCombId = "V23-023",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0324",
                            MotherId_Placeholder = "5053-0223",
                            Mother_EarCombId = "5053-0223",
                            NickName = "Arcanine",
                            OriginId = "IdasId",
                            OwnerId = "IdasId",
                            Race = 17,
                            RightEarId = "5095"
                        },
                        new
                        {
                            EarCombId = "4398-3020",
                            Color = 28,
                            DateOfBirth = new DateOnly(2022, 7, 22),
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "3020",
                            NickName = "Douglas",
                            OwnerId = "MajasId",
                            Race = 10,
                            RightEarId = "4398"
                        },
                        new
                        {
                            EarCombId = "5053-0223",
                            Color = 16,
                            DateOfBirth = new DateOnly(2023, 5, 30),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0223",
                            MotherId_Placeholder = "4977-213",
                            Mother_EarCombId = "4977-213",
                            NickName = "Chinchou",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0723",
                            Color = 21,
                            DateOfBirth = new DateOnly(2023, 10, 15),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 1,
                            ForSale = 1,
                            Gender = 1,
                            LeftEarId = "0723",
                            MotherId_Placeholder = "4977-315",
                            Mother_EarCombId = "4977-315",
                            NickName = "Sandshrew",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-1023",
                            Color = 21,
                            DateOfBirth = new DateOnly(2023, 10, 15),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 0,
                            ForSale = 1,
                            Gender = 0,
                            LeftEarId = "1023",
                            MotherId_Placeholder = "4977-315",
                            Mother_EarCombId = "4977-315",
                            NickName = "Marabou",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "M63-2104",
                            Color = 24,
                            DateOfBirth = new DateOnly(2023, 5, 22),
                            FatherId_Placeholder = "M63-085",
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "2104",
                            MotherId_Placeholder = "M63-164",
                            NickName = "Ortovi",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "M63"
                        },
                        new
                        {
                            EarCombId = "5053-0823",
                            Color = 27,
                            DateOfBirth = new DateOnly(2023, 10, 15),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0823",
                            MotherId_Placeholder = "4977-315",
                            Mother_EarCombId = "4977-315",
                            NickName = "Pepsi",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0923",
                            Color = 26,
                            DateOfBirth = new DateOnly(2023, 10, 15),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0923",
                            MotherId_Placeholder = "4977-315",
                            Mother_EarCombId = "4977-315",
                            NickName = "Cola",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0623",
                            Color = 19,
                            DateOfBirth = new DateOnly(2023, 8, 17),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0623",
                            MotherId_Placeholder = "4977-213",
                            Mother_EarCombId = "4977-213",
                            NickName = "Karla",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "M63-3102",
                            Color = 19,
                            DateOfBirth = new DateOnly(2023, 9, 23),
                            FatherId_Placeholder = "M63-0204",
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "3102",
                            MotherId_Placeholder = "M63-0000",
                            NickName = "Xådda",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "M63"
                        },
                        new
                        {
                            EarCombId = "4977-206",
                            Color = 15,
                            DateOfBirth = new DateOnly(2022, 2, 2),
                            DateOfDeath = new DateOnly(2024, 4, 5),
                            FatherId_Placeholder = "M63-044",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "206",
                            MotherId_Placeholder = "M63-989",
                            NickName = "Dario",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "4977"
                        },
                        new
                        {
                            EarCombId = "4977-315",
                            Color = 15,
                            DateOfBirth = new DateOnly(2023, 1, 13),
                            DateOfDeath = new DateOnly(2024, 4, 15),
                            FatherId_Placeholder = "4977-205",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "315",
                            MotherId_Placeholder = "13-232",
                            NickName = "Miranda",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "4977"
                        },
                        new
                        {
                            EarCombId = "5053-0423",
                            Color = 15,
                            DateOfBirth = new DateOnly(2023, 5, 30),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0423",
                            MotherId_Placeholder = "4977-213",
                            Mother_EarCombId = "4977-213",
                            NickName = "Gastly",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "V23-023",
                            Color = 4,
                            DateOfBirth = new DateOnly(2020, 4, 10),
                            DateOfDeath = new DateOnly(2024, 4, 23),
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "023",
                            NickName = "Aslan",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "V23"
                        },
                        new
                        {
                            EarCombId = "4977-213",
                            Color = 6,
                            DateOfBirth = new DateOnly(2022, 3, 24),
                            FatherId_Placeholder = "M63-125",
                            ForBreeding = 1,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "213",
                            MotherId_Placeholder = "M63-155",
                            NickName = "Frida",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "4977"
                        },
                        new
                        {
                            EarCombId = "5053-0120",
                            Color = 28,
                            DateOfBirth = new DateOnly(2020, 3, 25),
                            DateOfDeath = new DateOnly(2021, 5, 31),
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0120",
                            NickName = "Ulla",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 0,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "3658-0819",
                            Color = 24,
                            DateOfBirth = new DateOnly(2019, 5, 31),
                            DateOfDeath = new DateOnly(2023, 1, 31),
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0819",
                            NickName = "Karina",
                            OwnerId = "MajasId",
                            Race = 0,
                            RightEarId = "3658"
                        },
                        new
                        {
                            EarCombId = "5053-0523",
                            Color = 6,
                            DateOfBirth = new DateOnly(2023, 8, 17),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0523",
                            MotherId_Placeholder = "4977-213",
                            Mother_EarCombId = "4977-213",
                            NickName = "Charizard",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0123",
                            Color = 6,
                            DateOfBirth = new DateOnly(2023, 5, 30),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0123",
                            MotherId_Placeholder = "4977-213",
                            Mother_EarCombId = "4977-213",
                            NickName = "Pichu",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0323",
                            Color = 15,
                            DateOfBirth = new DateOnly(2023, 8, 17),
                            DateOfDeath = new DateOnly(2023, 12, 18),
                            FatherId_Placeholder = "4977-206",
                            Father_EarCombId = "4977-206",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0323",
                            MotherId_Placeholder = "4977-213",
                            Mother_EarCombId = "4977-213",
                            NickName = "Hunter",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0124",
                            Color = 6,
                            DateOfBirth = new DateOnly(2024, 4, 1),
                            FatherId_Placeholder = "V23-023",
                            Father_EarCombId = "V23-023",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0124",
                            MotherId_Placeholder = "5053-0423",
                            Mother_EarCombId = "5053-0423",
                            NickName = "Rollo Darminatan",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0224",
                            Color = 18,
                            DateOfBirth = new DateOnly(2024, 4, 18),
                            FatherId_Placeholder = "5053-0723",
                            Father_EarCombId = "5053-0723",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "0224",
                            MotherId_Placeholder = "M63-3102",
                            Mother_EarCombId = "M63-3102",
                            NickName = "Chokolade",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0324",
                            Color = 18,
                            DateOfBirth = new DateOnly(2024, 4, 18),
                            FatherId_Placeholder = "5053-0723",
                            Father_EarCombId = "5053-0723",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0324",
                            MotherId_Placeholder = "M63-3102",
                            Mother_EarCombId = "M63-3102",
                            NickName = "Beartic",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0524",
                            Color = 21,
                            DateOfBirth = new DateOnly(2024, 4, 18),
                            FatherId_Placeholder = "5053-0723",
                            Father_EarCombId = "5053-0723",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0524",
                            MotherId_Placeholder = "M63-3102",
                            Mother_EarCombId = "M63-3102",
                            NickName = "Metchi",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-0724",
                            Color = 19,
                            DateOfBirth = new DateOnly(2024, 4, 18),
                            FatherId_Placeholder = "5053-0723",
                            Father_EarCombId = "5053-0723",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 1,
                            LeftEarId = "0724",
                            MotherId_Placeholder = "M63-3102",
                            Mother_EarCombId = "M63-3102",
                            NickName = "Dewgong",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        },
                        new
                        {
                            EarCombId = "5053-10724",
                            Color = 18,
                            DateOfBirth = new DateOnly(2024, 4, 18),
                            FatherId_Placeholder = "5053-0723",
                            Father_EarCombId = "5053-0723",
                            ForBreeding = 0,
                            ForSale = 0,
                            Gender = 0,
                            LeftEarId = "10724",
                            MotherId_Placeholder = "M63-3102",
                            Mother_EarCombId = "M63-3102",
                            NickName = "Ice Beam",
                            OriginId = "MajasId",
                            OwnerId = "MajasId",
                            Race = 17,
                            RightEarId = "5053"
                        });
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BodyPoint")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateRated")
                        .HasColumnType("date");

                    b.Property<string>("EarCombId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FurNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FurPoint")
                        .HasColumnType("int");

                    b.Property<string>("RabbitRatedEarCombId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TotalPoint")
                        .HasColumnType("int");

                    b.Property<string>("WeightNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeightPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RabbitRatedEarCombId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.TransferRequst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateAccepted")
                        .HasColumnType("date");

                    b.Property<string>("IssuerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("RabbitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SaleConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("RabbitId");

                    b.HasIndex("RecipentId");

                    b.ToTable("TransferRequests");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Trimming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateTrimmed")
                        .HasColumnType("date");

                    b.Property<int>("DisposableWoolWeightGram")
                        .HasColumnType("int");

                    b.Property<int>("FirstSortmentWeightGram")
                        .HasColumnType("int");

                    b.Property<float?>("HairLengthCm")
                        .HasColumnType("real");

                    b.Property<string>("RabbitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SecondSortmentWeightGram")
                        .HasColumnType("int");

                    b.Property<int?>("TimeUsedMinutes")
                        .HasColumnType("int");

                    b.Property<float?>("WoolDensity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("RabbitId");

                    b.ToTable("Trimmings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoadNameAndNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "MikkelsId",
                            AccessFailedCount = 0,
                            City = "Kirke Såby",
                            ConcurrencyStamp = "37893f79-4c50-4ca2-8950-06b189583d60",
                            Email = "Mikk.fri@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mikkel",
                            LastName = "Friborg",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKK.FRI@GMAIL.COM",
                            NormalizedUserName = "MIKK.FRI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO9Sx3orp+4S2q2CMR9Zvdt8ltwrxavfRmVFsOZ5/UDotpt0aik7yYzU6WzJCDYbSg==",
                            PhoneNumber = "81183394",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Fynsvej 14",
                            SecurityStamp = "6974d40b-bffd-4414-926b-335e064be232",
                            TwoFactorEnabled = false,
                            UserName = "Mikk.fri@gmail.com",
                            ZipCode = 4060
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "BreederPremium",
                            NormalizedName = "BREEDERPREMIUM"
                        },
                        new
                        {
                            Id = "4",
                            Name = "BreederBasic",
                            NormalizedName = "BREEDERBASIC"
                        },
                        new
                        {
                            Id = "5",
                            Name = "UserBasicFree",
                            NormalizedName = "USERBASICFREE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "User:Read",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "User:Create",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "User:Update",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "User:Delete",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Rabbit:Create",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Rabbit:Read",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Rabbit:Update",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Rabbit:Delete",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Rabbit:Create",
                            ClaimValue = "Any",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Rabbit:Read",
                            ClaimValue = "Any",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Rabbit:Update",
                            ClaimValue = "Any",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Rabbit:Delete",
                            ClaimValue = "Any",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Rabbit:Create",
                            ClaimValue = "Own",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Rabbit:Read",
                            ClaimValue = "Own",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Rabbit:Update",
                            ClaimValue = "Own",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Rabbit:Delete",
                            ClaimValue = "Own",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Rabbit:ImageCount",
                            ClaimValue = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Rabbit:Create",
                            ClaimValue = "Own",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Rabbit:Read",
                            ClaimValue = "Own",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Rabbit:Update",
                            ClaimValue = "Own",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Rabbit:Delete",
                            ClaimValue = "Own",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Rabbit:ImageCount",
                            ClaimValue = "1",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "IdasId",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "MajasId",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "MikkelsId",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Breeder", b =>
                {
                    b.HasBaseType("DB_AngoraLib.Models.User");

                    b.Property<string>("BreederRegNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("BreederRegNo")
                        .IsUnique()
                        .HasFilter("[BreederRegNo] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Breeder");

                    b.HasData(
                        new
                        {
                            Id = "IdasId",
                            AccessFailedCount = 0,
                            City = "Kirke Såby",
                            ConcurrencyStamp = "b5bf9ada-6cf9-4f7f-a58a-82ceb5724610",
                            Email = "IdaFriborg87@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ida",
                            LastName = "Friborg",
                            LockoutEnabled = false,
                            NormalizedEmail = "IDAFRIBORG87@GMAIL.COM",
                            NormalizedUserName = "IDAFRIBORG87@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHofojj11Jz8HINqAlgS75O6x80/x2x3GjZ380HNNUfo0ZAQvwqhqDdBBwd5p/HgsA==",
                            PhoneNumber = "27586455",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Fynsvej 14",
                            SecurityStamp = "a68c37d2-84a1-4e31-956c-bd391f70a44f",
                            TwoFactorEnabled = false,
                            UserName = "IdaFriborg87@gmail.com",
                            ZipCode = 4060,
                            BreederRegNo = "5095"
                        },
                        new
                        {
                            Id = "MajasId",
                            AccessFailedCount = 0,
                            City = "Benløse",
                            ConcurrencyStamp = "d6823236-39ce-44ff-b717-91a814b0a870",
                            Email = "MajaJoensen89@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maja",
                            LastName = "Hulstrøm",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAJAJOENSEN89@GMAIL.COM",
                            NormalizedUserName = "MAJAJOENSEN89@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENCMn8W8+sLYt4x0BIZozGuOTqxOnGiy3IX6bCuHJOvONbHdxBmGW6I0u7sfMcC+zw==",
                            PhoneNumber = "28733085",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Sletten 4",
                            SecurityStamp = "25061780-4cc8-47bb-82ed-e183d2a6a499",
                            TwoFactorEnabled = false,
                            UserName = "MajaJoensen89@gmail.com",
                            ZipCode = 4100,
                            BreederRegNo = "5053"
                        });
                });

            modelBuilder.Entity("DB_AngoraLib.Models.ApplicationBreeder", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "UserApplicant")
                        .WithMany("BreederApplications")
                        .HasForeignKey("UserApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserApplicant");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.BreederBrand", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Breeder", "BreederBrandOwner")
                        .WithOne("BreederBrand")
                        .HasForeignKey("DB_AngoraLib.Models.BreederBrand", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BreederBrandOwner");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Favorite", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Photo", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", null)
                        .WithMany("Photos")
                        .HasForeignKey("RabbitEarCombId");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Father")
                        .WithMany("FatheredChildren")
                        .HasForeignKey("Father_EarCombId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Mother")
                        .WithMany("MotheredChildren")
                        .HasForeignKey("Mother_EarCombId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserOrigin")
                        .WithMany("RabbitsLinked")
                        .HasForeignKey("OriginId");

                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserOwner")
                        .WithMany("RabbitsOwned")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("UserOrigin");

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rating", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "RabbitRated")
                        .WithMany()
                        .HasForeignKey("RabbitRatedEarCombId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RabbitRated");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.RefreshToken", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.TransferRequst", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserIssuer")
                        .WithMany("RabbitTransfers_Issued")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Rabbit")
                        .WithMany()
                        .HasForeignKey("RabbitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserRecipent")
                        .WithMany("RabbitTransfers_Received")
                        .HasForeignKey("RecipentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Rabbit");

                    b.Navigation("UserIssuer");

                    b.Navigation("UserRecipent");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Trimming", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Rabbit")
                        .WithMany("Trimmings")
                        .HasForeignKey("RabbitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rabbit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.Navigation("FatheredChildren");

                    b.Navigation("MotheredChildren");

                    b.Navigation("Photos");

                    b.Navigation("Trimmings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Navigation("BreederApplications");

                    b.Navigation("Favorites");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Breeder", b =>
                {
                    b.Navigation("BreederBrand")
                        .IsRequired();

                    b.Navigation("RabbitTransfers_Issued");

                    b.Navigation("RabbitTransfers_Received");

                    b.Navigation("RabbitsLinked");

                    b.Navigation("RabbitsOwned");
                });
#pragma warning restore 612, 618
        }
    }
}
