name: Build and deploy .NET Core application to Web App DB-Angora

on:
  push:
    branches:
      - master

env:
  SOLUTION_FILE: DB-AngoraLib.sln                      # Navnet på løsningsfilen
  PROJECT_FILE: DB-AngoraREST/DB-AngoraREST.csproj     # Sti til projektfilen
  AZURE_WEBAPP_NAME: DB-Angora                         # Navn på Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: DB-AngoraREST\publish     # Output-sti til den buildede pakke
  CONFIGURATION: Debug                                 # Debug/Release
  DOTNET_CORE_VERSION: 8.0.x                           # .NET Core SDK version
  WORKING_DIRECTORY: .                                 # Sti til roden af applikationsmappen
  ASPNETCORE_ENVIRONMENT: Development                  # Development, Staging, Production (Development giver mest debug info)

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read                          # Tilladelse til dorny/test-reporter@v1
      checks: write                           # Tilladelse til dorny/test-reporter@v1
    steps:
      - uses: actions/checkout@v4
  
      - name: Cache NuGet packages            # Cacher NuGet-pakker for at fremskynde byggetiden
        uses: actions/cache@v4                # Opdateret fra cache@3 til cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

      - name: Setup .NET SDK                  # Sætter .NET SDK op til den definerede version
        uses: actions/setup-dotnet@v4                       
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore Dependencies            # Gendanner afhængigheder til hele løsningen
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build                           # Bygger hele løsningen
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Test                            # Kører testene for alle testprojekter i løsningen
        run: dotnet test ${{ env.SOLUTION_FILE }} --configuration ${{ env.CONFIGURATION }} --no-build --logger "trx;LogFileName=test_results.trx"
        
      - name: Publish Test Results            # Publicerer testresultaterne
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: '**/test_results.trx'
          reporter: dotnet-trx 

      - name: Publish Application             # Publicerer applikationen
        run: dotnet publish ${{ env.PROJECT_FILE }} --configuration ${{ env.CONFIGURATION }} --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
        
      - name: Publish Artifacts               # Upload af bygget webapp
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy:
    runs-on: windows-latest
    needs: build
    steps:

      - name: Download Artifact from build job 
        uses: actions/download-artifact@v4
        with:
          name: webapp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Set environment variables
        env:
          AZURE_SQL_CONNECTION_STRING: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          ASPNETCORE_ENVIRONMENT: Production
        run: |
          echo "Environment variables set."

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.DB_Angora_CC97 }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
